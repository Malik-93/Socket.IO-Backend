{"version":3,"sources":["components/Partner.js","components/Chat.js","App.js","serviceWorker.js","Redux/Actions/actionsClass.js","Redux/Reducers/todo-reducer.js","Redux/Root-Reducer/root-reducer.js","Redux/Store/Store.js","index.js"],"names":["peer","require","initiator","trickle","Partner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","peerSignalhandle","on","data","console","log","document","getElementById","value","JSON","stringify","connectPeer","otherId","parse","signal","state","socket","isLoading","messages","yourId","react_default","a","createElement","id","onClick","style","marginTop","Component","Chat","socketConnection","socketIO","setState","chatHandle","feedback","message","user","emit","innerHTML","newArr","push","localStorage","setItem","feedbackHandle","length","map","sms","index","key","listStyle","marginLeft","type","placeholder","onKeyPress","React","connect","getTodos","TodoReducer","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","TodoActions","todo","CREATE_TODO","payload","READ_TODO","UPDATE_TODO","DELETE_TODO","initialState","todos","rootReducer","combineReducers","arguments","undefined","action","concat","toConsumableArray","paylaod","store","createStore","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c785bee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst Peer =  require('simple-peer');\r\nconst peer = new Peer({\r\n    initiator:  true,\r\n    trickle: false\r\n   })\r\n\r\nexport default class Partner extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          socket : null,\r\n          isLoading: true,\r\n          messages: [],\r\n          yourId: '',\r\n          otherId: ''\r\n        }\r\n      }\r\n    \r\n  \r\n    peerSignalhandle = () => {\r\n        peer.on('signal', (data) => {\r\n            console.log(data)\r\n        document.getElementById('yourId').value = JSON.stringify( data )\r\n        })\r\n      }\r\n\r\n      connectPeer = () => {\r\n        const otherId = JSON.parse(document.getElementById('otherId').value)\r\n        peer.signal( otherId )\r\n      }\r\n    \r\n\r\n    render() {\r\n    return (\r\n      <div>\r\n           <div><textarea id='yourId'></textarea><br /> Your Id <br />\r\n                  <textarea id='otherId'></textarea> <br /> Other Id\r\n                  </div>\r\n                  <button  onClick={this.connectPeer} > Connect </button>\r\n                <button onClick ={this.peerSignalhandle} style={{marginTop: 20}} >Check Peer Signal</button>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { connect  } from 'react-redux';\r\nimport socketIO from 'socket.io-client';\r\n// import photo from '../assets/photo.jpeg';\r\n// const Peer =  require('simple-peer');\r\n\r\n// const peer = new Peer({\r\n//   initiator: true,\r\n//   trickle: false\r\n//  })\r\n\r\nclass Chat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      socket : null,\r\n      isLoading: true,\r\n      messages: [],\r\n      yourId: '',\r\n      otherId: ''\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.socketConnection()\r\n  }\r\n  \r\n \r\n  // peerSignalhandle = () => {\r\n  //   const { socket } = this.state\r\n\r\n  //   peer.on('signal', (signal) => {\r\n     \r\n  //     socket.emit( 'signal', signal )\r\n  //   })  \r\n\r\n  //       peer.on( 'stream',  ( stream ) => {     \r\n  //       navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then( (MediaStream) => {\r\n  //       const video = document.querySelector('video');\r\n  //       const canvas= document.getElementById('preview')\r\n  //       const context = canvas.getContext(\"2d\")\r\n  //       const broadcastVideo = document.getElementById('broadcastVideo')\r\n  //       context.drawImage( broadcastVideo, 0, 0, context.width, context.height )\r\n  //       canvas.width= 800;\r\n  //       canvas.height = 600;\r\n  //       context.width = canvas.width;\r\n  //       context.height = canvas.height\r\n  //       video.srcObject = MediaStream;\r\n  //       broadcastVideo.srcObject = stream\r\n  //       video.play()\r\n  //   })\r\n  //   })\r\n\r\n\r\n\r\n  // // peer.on('stream', stream => {\r\n  // //   this.remoteVideo.srcObject = stream\r\n  // // })\r\n\r\n\r\n  // }\r\n\r\n  // connectPeer = () => {\r\n  //   const otherId = JSON.parse(document.getElementById('otherId').value)\r\n  //   peer.signal( otherId )\r\n  // }\r\n\r\n\r\n  socketConnection = () => {\r\n    const socketURL = 'http://localhost:8000/';\r\n    const socket = socketIO ( socketURL )\r\n    this.setState({\r\n      socket,\r\n    })\r\n    socket.on('connection', () => {\r\n      console.log('Successfully connected in Client ')\r\n    })\r\n  }  \r\n \r\n  \r\n  \r\n  chatHandle = () => {\r\n    console.log('Chat Handle')\r\n    const { socket } = this.state\r\n     const feedback = document.getElementById('feedback')\r\n     const message = document.getElementById('message')\r\n     const user = document.getElementById('user')\r\n\r\n    socket.emit('chat', {\r\n      message: message.value,\r\n      user: user.value\r\n    })\r\n\r\n    socket.on('chat', (data) => {\r\n       feedback.innerHTML = ''\r\n       const newArr = this.state.messages;\r\n       newArr.push( data )\r\n       this.setState({ messages: newArr })\r\n       localStorage.setItem('Chats', JSON.stringify( this.state.messages )  )\r\n    })\r\n  }\r\n\r\n  feedbackHandle = () => {\r\n    const { socket } = this.state;\r\n    const feedback = document.getElementById('feedback')\r\n    const user = document.getElementById('user');\r\n    \r\n    socket.emit('typing', user.value )\r\n\r\n    socket.on('typing', (data) => {\r\n      feedback.innerHTML = '<p><em>' + data + ' is typing message... </em></p>'\r\n    })\r\n  }\r\n\r\n  // imageBroadcast = () => {\r\n  //     const { socket } = this.state\r\n\r\n  //     navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then( (MediaStream) => {\r\n  //     const video = document.querySelector('video');\r\n  //     const canvas= document.getElementById('preview')\r\n  //     const context = canvas.getContext(\"2d\")\r\n  //     const broadcastVideo = document.getElementById('broadcastVideo')\r\n  //     context.drawImage( broadcastVideo, 0, 0, context.width, context.height )\r\n  //     canvas.width= 800;\r\n  //     canvas.height = 600;\r\n  //     context.width = canvas.width;\r\n  //     context.height = canvas.height\r\n  //     video.srcObject = MediaStream;\r\n  //     var broad = broadcastVideo.srcObject = MediaStream\r\n  //     video.play()\r\n  //     socket.emit( 'check', broad )\r\n\r\n  //     socket.on('check', (data) => {\r\n  //       console.log('Broadcast Video', data )\r\n  //     })\r\n  //     })\r\n      \r\n  // }\r\n\r\nrender() {\r\n\r\n            return (\r\n              <div>\r\n           {console.log('Return Sectin')}  \r\n                 {/* <div><textarea id='yourId'></textarea><br /> Your Id <br />\r\n                  <textarea id='otherId'></textarea> <br /> Other Id\r\n                  </div>\r\n                  <button  onClick={this.connectPeer} > Connect </button>\r\n                <button onClick ={this.peerSignalhandle} style={{marginTop: 20}} >Check Peer Signal</button> */}\r\n              <video></video>\r\n                <div id='mario-chat'>\r\n                <div id='chat-window'>\r\n                {/* <video src='' id='broadcastVideo' autoPlay={true} /> */}\r\n\r\n                {/* <video autoPlay id=\"remoteVideo\"  ref={video => (this.remoteVideo = video)}></video> */}\r\n\r\n                <div id='output'>\r\n                {/* <canvas id='preview'></canvas> */}\r\n                {\r\n                   this.state.messages.length === 0  ? '' : this.state.messages.map((sms, index) => {\r\n                   return <ul key={ index } style={{listStyle: 'none'}}>\r\n                           <li><b>Name:  </b><em> {sms.user}</em> <br />\r\n                           <p style = {{marginLeft: 60}}> \r\n                           <b>Message:  </b> { sms.message } </p> </li>\r\n                          </ul>\r\n                  })\r\n                }\r\n                </div>\r\n                <div id='feedback'></div>\r\n                </div>\r\n                <input id='user' type='text' placeholder='Username' /><br />\r\n                <input id='message' type='text' placeholder='Type message ...' onKeyPress = { this.feedbackHandle } /><br />\r\n                <button id='send-btn' onClick={this.chatHandle}> Send </button>\r\n                <button id='send-btn' onClick={this.peerSignalhandle}>Camera </button>\r\n                {/* <button id='send-btn' onClick={this.clearLocal}>clearLocal </button> */}\r\n                </div>\r\n                     {/* { this.state.isLoading === false ? this.imageBroadcast()  : '' } */}\r\n                </div>\r\n            )\r\n\r\n      }\r\n  }\r\nconst mapStateToProps = ( state ) => {\r\n    return {\r\n        getTodos: state.TodoReducer\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps )( Chat )\r\n","import React from 'react';\r\n// import './App.css';\r\nimport Partner from './components/Partner'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Chat from './components/Chat';\r\n\r\nfunction App() {\r\n  return (\r\n<BrowserRouter>\r\n    <div>\r\n  <Switch>\r\n    <Route exact path='/'  component = { Chat } />\r\n    <Route path='/partner' component={Partner} />\r\n  </Switch>\r\n  </div>\r\n  </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","class TodoActions {\r\n    static CREATE_TODO = 'CREATE_TODO';\r\n    static READ_TODO = 'READ_TODO';\r\n    static UPDATE_TODO = 'UPDATE_TODO';\r\n    static DELETE_TODO = 'DELETE_TODO';\r\n\r\n    static createTodo ( todo )  {\r\n        return {\r\n            type: this.CREATE_TODO,\r\n            payload: todo\r\n        }\r\n    }\r\n\r\n    static  readTodo ( todo )  {\r\n        return {\r\n            type:this.READ_TODO,\r\n            payload: todo\r\n        }\r\n    }\r\n\r\n    static updateTodo  ( todo ) {\r\n        return {\r\n            type: this.UPDATE_TODO,\r\n            payload: todo\r\n        }\r\n    }\r\n    static deleteTodo ( todo ) {\r\n        return {\r\n            type: this.DELETE_TODO,\r\n            payload: todo\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TodoActions","import TodoActions from './../Actions/actionsClass';\r\n\r\nconst initialState = {\r\n    todos: [ 'MongoDB', 'ExpressJs', 'ReactJs', 'NodeJs' ]\r\n}\r\n\r\nconst TodoReducer = ( state = initialState, action) => {\r\n    switch ( action.type ) {\r\n        \r\n        case TodoActions.CREATE_TODO:\r\n        return [ ...state, action.paylaod ]\r\n            \r\n        case TodoActions.READ_TODO:\r\n        return [ ...state, action.paylaod ]\r\n        \r\n        case TodoActions.UPDATE_TODO:\r\n        return [ ...state, action.paylaod ]\r\n        \r\n        case TodoActions.DELETE_TODO:\r\n        return [ ...state, action.paylaod ]\r\n      \r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport {\r\n    \r\n    TodoReducer\r\n}","import { combineReducers } from 'redux';\r\nimport { TodoReducer } from \"../Reducers/todo-reducer\";\r\n\r\nconst rootReducer = combineReducers({ TodoReducer })\r\n\r\nexport default rootReducer\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './../Root-Reducer/root-reducer';\r\n\r\nconst store = createStore ( rootReducer, {} )\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './Redux/Store/Store'\r\n\r\nReactDOM.render(\r\n<Provider store = { store }> <App /> </Provider>,  document.getElementById ('root') );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}